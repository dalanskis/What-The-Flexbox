/* CSS Normalize */
article,aside,details,figcaption,figure,footer,header,hgroup,nav,section,summary{display:block;}audio,canvas,video{display:inline-block;}audio:not([controls]){display:none;height:0;}[hidden]{display:none;}html{font-family:sans-serif;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%;}a:focus{outline:thin dotted;}a:active,a:hover{outline:0;}h1{font-size:2em;}abbr[title]{border-bottom:1px dotted;}b,strong{font-weight:700;}dfn{font-style:italic;}mark{background:#ff0;color:#000;}code,kbd,pre,samp{font-family:monospace, serif;font-size:1em;}pre{white-space:pre-wrap;word-wrap:break-word;}q{quotes:\201C \201D \2018 \2019;}small{font-size:80%;}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline;}sup{top:-.5em;}sub{bottom:-.25em;}img{border:0;}svg:not(:root){overflow:hidden;}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em;}button,input,select,textarea{font-family:inherit;font-size:100%;margin:0;}button,input{line-height:normal;}button,html input[type=button],/* 1 */
input[type=reset],input[type=submit]{-webkit-appearance:button;cursor:pointer;}button[disabled],input[disabled]{cursor:default;}input[type=checkbox],input[type=radio]{box-sizing:border-box;padding:0;}input[type=search]{-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box;}input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration{-webkit-appearance:none;}textarea{overflow:auto;vertical-align:top;}table{border-collapse:collapse;border-spacing:0;}body,figure{margin:0;}legend,button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0;}

/* Box-sizing border-box */
* { -moz-box-sizing: border-box; -webkit-box-sizing: border-box; box-sizing: border-box; }


/* Some default styles to make each box visible */
.box {
  color:white;
  font-size: 100px;
  text-align: center;
  text-shadow:4px 4px 0 rgba(0,0,0,0.1);
  padding:10px;
}

/* Colours for each box */
.box1 { background:#1abc9c;}
.box2 { background:#3498db;}
.box3 { background:#9b59b6;}
.box4 { background:#34495e;}
.box5 { background:#f1c40f;}
.box6 { background:#e67e22;}
.box7 { background:#e74c3c;}
.box8 { background:#bdc3c7;}
.box9 { background:#2ecc71;}
.box10 { background:#16a085;}


/* We start writing out flexbox here. The above is just page setup */
.container {
  display:flex;
}

.box {
  flex:1; /* distributes equally */
}

.box3 {
  order:1; /* by default, everything is set to '0', if its set to anything greater than 0
  it gets put at the end. So this is how it really is now from left to right now with 
  order set to 1 on .box3: 0, 0, 0 (where the 3 used to be), and 1 aka .box3 now starts 
  at the end (where 10 would be). */
}

.box5 {
  order:2; /* Now that .box5 is set to 2, you see it has moved next to 1 at the very end of the list.
  .box3 has now moved inward [left].The caveat of 'order' is that your ordering will be switched if you're using this where
  users will need to copy text. They may think theyre copying 1,2,3 but theyre really going to have
  copied 3, 6, and 2. However, this isn't that big of a deal since you arent really using flexbox for
  those items / elements anyways. This is useful because now you dont have to just deal with where 
  flexbox puts your divs (esp in responsive), but you have more control of what order they're placed. */
}

.box7 {
  order: -2; /* negatives work the same way in that using them will produce the element to move to the 
  beginning of the list. So .box7 has been placed at position 1. */
}

.box8 {
  order: -1; /*here you can see that the 1st left spot will be taken by the higher negative integer,
  so .box7 has taken spot 1, whereas .box8 is in spot 2. */
}
